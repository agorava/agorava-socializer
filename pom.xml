<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2014-2016 Agorava
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.agorava</groupId>
		<artifactId>agorava-parent</artifactId>
		<version>0.7.1-SNAPSHOT</version>
	</parent>
	<artifactId>agorava-socializer</artifactId>
	<packaging>war</packaging>
	<name>Agorava Socializer</name>
	<description>Demonstration of Agorava in a Java EE application.</description>
	<url>http://agorava.org</url>
	<inceptionYear>2012</inceptionYear>

	<developers>
		<developer>
			<name>Antoine Sabot-Durand</name>
			<email>antoine@sabot-durand.net</email>
			<timezone>CET</timezone>
			<roles>
				<role>Project Lead</role>
			</roles>
		</developer>
		<developer>
			<name>Paul Dijou</name>
			<timezone>CET</timezone>
		</developer>
		<developer>
			<name>Werner Keil</name>
			<timezone>CET</timezone>
		</developer>
		<developer>
			<name>Ove Ranheim</name>
			<timezone>CET</timezone>
		</developer>
	</developers>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Define the version of JBoss' Java EE 6 APIs and Tools we want 
			to import. -->
		<jboss.bom.version>1.0.0.M6</jboss.bom.version>
		<!-- Alternatively, comment out the above line, and un-comment the 
			line below to use version 1.0.0.M6-redhat-1 which is a release certified 
			to work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 
			maven repository. -->
		<!-- <jboss.bom.version>1.0.0.M6-redhat-1</jboss.bom.version>> -->
		<version.primefaces>3.3</version.primefaces>
		<version.primefaces.themes>1.0.4</version.primefaces.themes>
		<version.prettytime>1.0.8.Final</version.prettytime>
		<version.agoravamodule>0.7.1-SNAPSHOT</version.agoravamodule>
		<version.jetty>9.0.7.v20131107</version.jetty>

		<fileupload.version>1.3</fileupload.version>
	</properties>

	<repositories>
		<repository>
			<id>prime-repo</id>
			<name>PrimeFaces Maven Repository</name>
			<url>http://repository.primefaces.org</url>
			<layout>default</layout>
		</repository>
		   <repository>
            <id>jcenter</id>
            <name>JCenter</name>
            <url>http://jcenter.bintray.com</url>
        </repository>
        <repository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>bintray-release</id>
            <name>libs-release</name>
            <url>http://oss.jfrog.org/artifactory/libs-release</url>
        </repository>
        <repository>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <id>bintray-snapshot</id>
            <name>libs-snapshot</name>
            <url>http://oss.jfrog.org/artifactory/libs-snapshot</url>
        </repository>
	</repositories>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.agorava</groupId>
				<artifactId>agorava-bom</artifactId>
				<version>${version.agoravamodule}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- JBoss distributes a complete set of Java EE 6 APIs including 
				a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
				a collection) of artifacts. We use this here so that we always get the correct 
				versions of artifacts. Here we use the jboss-javaee-6.0-with-tools stack 
				(you can read this as the JBoss stack of the Java EE 6 APIs, with some extras 
				tools for your project, such as Arquillian for testing) and the jboss-javaee-6.0-with-hibernate 
				stack you can read this as the JBoss stack of the Java EE 6 APIs, with extras 
				from the Hibernate family of projects) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${jboss.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
				<version>${jboss.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>


		<!-- First declare the APIs we depend on and need for compilation. 
			All of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided 
			scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes 
			for typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Annotation processor that raising compilation errors whenever 
			constraint annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-core-impl-cdi</artifactId>
		</dependency>

		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-core-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-twitter-api</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-facebook-api</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-linkedin-api</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-twitter-cdi</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-facebook-cdi</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.agorava</groupId>
			<artifactId>agorava-linkedin-cdi</artifactId>
			<version>${version.agoravamodule}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>${version.primefaces}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.ocpsoft.prettytime</groupId>
			<artifactId>prettytime</artifactId>
			<version>${version.prettytime}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${fileupload.version}</version>
			<scope>runtime</scope>
		</dependency>


		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and 
			Transactional(JTA) JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>


	<build>
		<!-- Maven will append the version to the finalName (which is the 
			name given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>


		<resources>
			<resource>
				<directory>src/main/resources/local</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates 
				annotation processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to 
						catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS 
				container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>7.1.1.Final</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>cloudbees</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources/cloudbees</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>

		<profile>
			<id>run</id>
			<dependencies>

				<dependency>
					<groupId>org.jboss.weld.servlet</groupId>
					<artifactId>weld-servlet</artifactId>
					<version>1.1.10.Final</version>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>com.sun.faces</groupId>
					<artifactId>jsf-api</artifactId>
					<version>2.1.3</version>
				</dependency>
				<dependency>
					<groupId>com.sun.faces</groupId>
					<artifactId>jsf-impl</artifactId>
					<version>2.1.3</version>
				</dependency>

			</dependencies>

			<build>
				<defaultGoal>clean jetty:run-forked</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.eclipse.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<version>${version.jetty}</version>
						<configuration>
							<stopPort>1353</stopPort>
							<stopKey>quit</stopKey>
							<contextXml>src/main/webapp/WEB-INF/jetty-web.xml</contextXml>
						</configuration>
					</plugin>
				</plugins>

			</build>
		</profile>


		<profile>
			<!-- An optional Arquillian testing profile that executes tests 
				in your JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute 
				the test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests 
				in a remote JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be 
				used when invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization 
				your app will need. -->
			<!-- By default that is to put the resulting archive into the 
				'deployments' folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.1.1</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>resin</id>
			<dependencies>
				<dependency>
					<groupId>org.javassist</groupId>
					<artifactId>javassist</artifactId>
					<version>3.15.0-GA</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	<scm>
		<connection>scm:git:git://github.com/agorava/agorava-socializer.git</connection>
		<developerConnection>scm:git:git@github.com:agorava/agorava-socializer.git</developerConnection>
		<url>https://github.com/agorava/agorava-socializer</url>
		<tag>HEAD</tag>
	</scm>
</project>
